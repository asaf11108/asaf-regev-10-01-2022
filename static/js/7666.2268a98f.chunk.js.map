{"version":3,"file":"static/js/7666.2268a98f.chunk.js","mappings":"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","sources":["components/favorite/favorite.tsx","pages/home/home-form.hook.ts","pages/home/home-query.hook.ts","components/autocomplete/autocomplete.tsx","components/autocomplete/autocomplete-input.hook.ts","pages/home/home.style.ts","pages/home/home.tsx"],"sourcesContent":["import { VFC } from 'react';\r\nimport { FavoriteProps } from './favorite.model';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\n\r\n\r\nconst Favorite: VFC<FavoriteProps> = ({ isFavorite }) => {\r\n\r\n    return (\r\n        <>\r\n            {isFavorite\r\n                ? <FavoriteIcon fontSize=\"inherit\" color=\"error\" />\r\n                : <FavoriteBorderIcon fontSize=\"inherit\" />}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Favorite;\r\n","import { UseControllerProps } from \"react-hook-form\";\r\n\r\nexport const HOME_FORM_REG_EXP = /^[a-zA-Z ]+$/;\r\n\r\nexport const CONTROLLER_LOCATION_INPUT_RULES: UseControllerProps['rules'] = {\r\n    required: {\r\n        value: true,\r\n        message: `Please enter location`,\r\n    },\r\n    pattern: {\r\n        value: HOME_FORM_REG_EXP,\r\n        message: \"Only letters are allowed\",\r\n    },\r\n}\r\n\r\n// INFO: this relavent for autocomplete with form and submit\r\n// export const CONTROLLER_NAME_LOCATION = 'location';\r\n\r\n// export interface HomeForm {\r\n//     [CONTROLLER_NAME_LOCATION]: Location['key'];\r\n// }\r\n\r\n// export const useHomeForm = (defaultLocation: Location): FormProps<HomeForm, Location, Location['key']> => {\r\n//     const { handleSubmit, register, getFieldState, setValue } = useForm<HomeForm>({ mode: 'onChange', defaultValues: { [CONTROLLER_NAME_LOCATION]: defaultLocation.key } });\r\n    \r\n//     const { ref: controlRef, ...registerProps } = register(CONTROLLER_NAME_LOCATION);\r\n\r\n//     return { \r\n//         handleSubmit,\r\n//         controls: {\r\n//             [CONTROLLER_NAME_LOCATION]: {\r\n//                 ...registerProps,\r\n//                 controlRef,\r\n//                 error: getFieldState(CONTROLLER_NAME_LOCATION).error,\r\n//                 setValue: (val, options) => setValue(CONTROLLER_NAME_LOCATION, val, options),\r\n//                 defaultOption: defaultLocation\r\n//             }\r\n//         }\r\n//     };\r\n// }\r\n","import { useState } from \"react\";\r\nimport usePromise from \"react-use-promise\";\r\nimport API from \"../../api/api\";\r\nimport { AutocompleteOption } from \"../../api/interfaces/autocomplete\";\r\n\r\nconst useHomeQuery = () => {\r\n    const [query, setQuery] = useState<string>();\r\n    const promiseQuery = usePromise<AutocompleteOption[]>(\r\n      () => query ? API.getLocations(query) : Promise.resolve([]),\r\n      [query]\r\n    );\r\n\r\n    return { setQuery, promiseQuery };\r\n}\r\n\r\nexport default useHomeQuery;\r\n","import { FC, SyntheticEvent, useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Autocomplete as MuiAutocomplete, TextField } from \"@mui/material\";\r\nimport { AutocompleteProps } from \"./autocomplete.model\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport { usePrevious } from \"react-use\";\r\nimport { get } from \"lodash-es\";\r\nimport { useAutocompleteInput } from \"./autocomplete-input.hook\";\r\n\r\nconst Autocomplete = <T extends {}, Val>({\r\n  options = [],\r\n  loading = false,\r\n  placeholder = \"option\",\r\n  defaultOption,\r\n  idProp = \"id\",\r\n  nameProp = \"name\",\r\n  inputRules,\r\n  error,\r\n  onSelect,\r\n  onInputDebounce,\r\n  onInputFocus,\r\n  onInput,\r\n  controlRef,\r\n  onChange,\r\n  onBlur,\r\n  setValue,\r\n  ...otherProps\r\n}: AutocompleteProps<T, Val>): ReturnType<FC> => {\r\n  // throw error\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [option, setOption] = useState(defaultOption);\r\n\r\n  const inputController = useAutocompleteInput(get(defaultOption, nameProp, \"\"), inputRules);\r\n\r\n  const [inputDebounce] = useDebounce(inputController.field.value, 1000);\r\n  const previousInputDebounce = usePrevious(inputDebounce);\r\n\r\n  useEffect(() => {\r\n    previousInputDebounce !== inputDebounce &&\r\n      open &&\r\n      !inputController.fieldState.error &&\r\n      !error &&\r\n      onInputDebounce?.(inputDebounce);\r\n  }, [open, inputController.fieldState.error, error, inputDebounce, previousInputDebounce, onInputDebounce]);\r\n\r\n  const _onInput: AutocompleteProps<T>[\"onInput\"] = query => {\r\n    inputController.field.onChange(query);\r\n    onInput?.(query);\r\n  };\r\n\r\n  const _onSelect = (event: SyntheticEvent, option: T) => {\r\n    _onInput(get(option, nameProp, \"\"));\r\n    if (option) {\r\n      setOption(option);\r\n      onChange?.(event);\r\n      setValue?.(get(option, idProp, option));\r\n      onSelect(option);\r\n    }\r\n  };\r\n\r\n  const _onBlur: AutocompleteProps<T>[\"onBlur\"] = async event => {\r\n    inputController.field.onBlur();\r\n    setOpen(false);\r\n    onBlur?.(event);\r\n  };\r\n\r\n  return (\r\n    <MuiAutocomplete\r\n      {...otherProps}\r\n      ref={controlRef}\r\n      defaultValue={defaultOption}\r\n      value={option}\r\n      open={open && !inputController.fieldState.error}\r\n      onOpen={() => setOpen(true)}\r\n      onClose={() => setOpen(false)}\r\n      options={options}\r\n      onChange={(event, option) => _onSelect(event, option!)}\r\n      onInputChange={(_, query) => _onInput(query)}\r\n      onBlur={_onBlur}\r\n      getOptionLabel={(option) => get(option, nameProp, option)}\r\n      isOptionEqualToValue={(option, value) =>\r\n        get(option, idProp, option) === get(value, idProp, value)\r\n      }\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          data-testid=\"autocomplete-textfield\"\r\n          variant=\"standard\"\r\n          fullWidth\r\n          placeholder={placeholder}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            startAdornment: <SearchIcon />,\r\n            endAdornment: loading && <CircularProgress size=\"1em\" />,\r\n          }}\r\n          error={!!inputController.fieldState.error || !!error}\r\n          helperText={inputController.fieldState.error?.message || error?.message}\r\n          onFocus={() => option && onInputFocus?.(option)}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Autocomplete;\r\n","import { useForm, useController, UseControllerProps } from \"react-hook-form\";\r\n\r\nexport const useAutocompleteInput = (defaultValue: string, rules: UseControllerProps['rules']) => {\r\n    const { control } = useForm<{ name: string }>({ mode: 'onChange' });\r\n    return useController({\r\n      name: \"name\",\r\n      control,\r\n      defaultValue,\r\n      rules,\r\n    });\r\n}\r\n","import styled from \"@emotion/styled\";\r\nimport { Card, css, Typography } from \"@mui/material\";\r\nimport { spread } from \"../../styles/vendors/spread\";\r\n\r\nconst SharedBody = css`\r\n    display: flex;\r\n    flex-direction: column;\r\n    ${spread('minHeight', '400px', '500px')}\r\n`;\r\n\r\nconst SharedBodyStates = css`\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const Home = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nexport const AutocompleteCard = styled(Card)`\r\n    ${spread('width', '90%', '50%')}\r\n    margin: 0 auto;\r\n    ${spread('marginBottom', '20px', '30px')}\r\n`;\r\n\r\nexport const TitleTypography = styled(Typography)`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    flex-wrap: wrap-reverse;\r\n    & > span {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 5px;\r\n        align-items: center;\r\n    }\r\n\r\n    .MuiButton-root {\r\n        font-size: 40px;\r\n    }\r\n`;\r\n\r\nexport const BodyHeader = styled.div`\r\n    ${spread('margin', '20px 0', '60px 0')}\r\n    ${spread('fontSize', '50px', '80px')}\r\n    text-align: center;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    ${SharedBody}\r\n    justify-content: center;\r\n`;\r\n\r\nexport const Loader = styled.div`\r\n    ${SharedBody}\r\n    ${SharedBodyStates}\r\n`;\r\n\r\nexport const ErrorTypography = styled(Typography)`\r\n    ${SharedBody}\r\n    ${SharedBodyStates}\r\n    font-weight: 600;\r\n`;\r\n\r\nexport const Forecasts = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n`;\r\n","import { VFC, useEffect, useMemo } from \"react\";\r\nimport { Button, Card, CardContent } from \"@mui/material\";\r\nimport Forecast from \"../../components/forecast/forecast\";\r\nimport {\r\n  FavoriteLocation,\r\n  Location,\r\n} from \"../../store/favorite-locations/favorite-locations.model\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchFavoriteLocation } from \"../../store/favorite-locations/favorite-locations.thunk\";\r\nimport {\r\n  favoriteLocationsActive,\r\n  favoriteLocationsToggleFavorite,\r\n} from \"../../store/favorite-locations/favorite-locations.action\";\r\nimport {\r\n  FavoriteLocationSelectActive,\r\n  FavoriteLocationSelectActiveEntity,\r\n  FavoriteLocationSelectError,\r\n  FavoriteLocationSelectLoading,\r\n} from \"../../store/favorite-locations/favorite-locations.selector\";\r\nimport Favorite from \"../../components/favorite/favorite\";\r\nimport { useOneTemperatureType } from \"../../hooks/temprature-type.hook\";\r\nimport { flow } from \"lodash-es\";\r\nimport Loader from \"../../components/loader/loader\";\r\nimport { CONTROLLER_LOCATION_INPUT_RULES, HOME_FORM_REG_EXP } from \"./home-form.hook\";\r\nimport useHomeQuery from \"./home-query.hook\";\r\nimport Autocomplete from \"../../components/autocomplete/autocomplete\";\r\nimport { AutocompleteProps } from \"../../components/autocomplete/autocomplete.model\";\r\nimport * as S from \"./home.style\";\r\n\r\nconst Home: VFC = () => {\r\n  const dispatch = useDispatch();\r\n  const loadingLocation = useSelector(FavoriteLocationSelectLoading);\r\n  const errorLocation = useSelector(FavoriteLocationSelectError);\r\n  const favoriteLocation: FavoriteLocation = flow([\r\n    useSelector,\r\n    useOneTemperatureType,\r\n  ])(FavoriteLocationSelectActiveEntity);\r\n\r\n  const activeLocation = useSelector(FavoriteLocationSelectActive);\r\n\r\n  const {\r\n    setQuery,\r\n    promiseQuery: [response, , loadingState],\r\n  } = useHomeQuery();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchFavoriteLocation(activeLocation));\r\n  }, [dispatch, activeLocation]);\r\n\r\n  const onLocationSelect: AutocompleteProps<Location>[\"onSelect\"] = (\r\n    location\r\n  ) => {\r\n    dispatch(favoriteLocationsActive(location));\r\n  };\r\n\r\n  const onFavoriteClick = (): void => {\r\n    dispatch(favoriteLocationsToggleFavorite());\r\n  };\r\n\r\n  const options = useMemo<Location[]>(() => {\r\n    return (response || [])\r\n      .filter((location) => HOME_FORM_REG_EXP.test(location.LocalizedName))\r\n      .map<Location>((location) => ({\r\n        key: location.Key,\r\n        localizedName: location.LocalizedName,\r\n      }));\r\n  }, [response]);\r\n\r\n  return (\r\n    <S.Home>\r\n      <S.AutocompleteCard>\r\n        <CardContent>\r\n          <Autocomplete<Location, Location['key']>\r\n            idProp=\"key\"\r\n            nameProp=\"localizedName\"\r\n            placeholder=\"Search location\"\r\n            inputRules={CONTROLLER_LOCATION_INPUT_RULES}\r\n            loading={loadingState === \"pending\"}\r\n            defaultOption={activeLocation}\r\n            options={options}\r\n            onSelect={onLocationSelect}\r\n            onInputDebounce={setQuery}\r\n            onInputFocus={option => setQuery(option.localizedName)}\r\n          />\r\n        </CardContent>\r\n      </S.AutocompleteCard>\r\n\r\n      <Card>\r\n        {loadingLocation ? (\r\n          <S.Loader>\r\n            <Loader />\r\n          </S.Loader>\r\n        ) : errorLocation || !favoriteLocation ? (\r\n          <S.ErrorTypography variant=\"h1\">NO DATA</S.ErrorTypography>\r\n        ) : (\r\n          <CardContent>\r\n            <S.TitleTypography gutterBottom variant=\"h5\">\r\n              <span>\r\n                <span data-testid=\"localized-name\">\r\n                  {favoriteLocation.localizedName}\r\n                </span>\r\n                <span>{favoriteLocation.temperature}</span>\r\n              </span>\r\n              <Button disabled={loadingLocation} onClick={onFavoriteClick}>\r\n                <Favorite isFavorite={favoriteLocation.isFavorite} />\r\n              </Button>\r\n            </S.TitleTypography>\r\n            <S.Body>\r\n              <S.BodyHeader>{favoriteLocation.weatherText}</S.BodyHeader>\r\n              <S.Forecasts>\r\n                {favoriteLocation.forecasts.map((forecast) => (\r\n                  <Forecast key={forecast.title} forecast={forecast} />\r\n                ))}\r\n              </S.Forecasts>\r\n            </S.Body>\r\n          </CardContent>\r\n        )}\r\n      </Card>\r\n    </S.Home>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["isFavorite","fontSize","color","HOME_FORM_REG_EXP","CONTROLLER_LOCATION_INPUT_RULES","required","value","message","pattern","useState","query","setQuery","promiseQuery","usePromise","API","Promise","resolve","options","loading","placeholder","defaultOption","idProp","nameProp","inputRules","error","onSelect","onInputDebounce","onInputFocus","onInput","controlRef","onChange","onBlur","setValue","otherProps","open","setOpen","option","setOption","inputController","defaultValue","rules","control","useForm","mode","useController","name","useAutocompleteInput","get","useDebounce","field","inputDebounce","previousInputDebounce","usePrevious","useEffect","fieldState","_onInput","_onSelect","event","_onBlur","ref","onOpen","onClose","onInputChange","_","getOptionLabel","isOptionEqualToValue","renderInput","params","TextField","variant","fullWidth","InputProps","startAdornment","Search","endAdornment","CircularProgress","size","helperText","onFocus","SharedBody","css","spread","SharedBodyStates","Home","AutocompleteCard","Card","TitleTypography","Typography","BodyHeader","Body","Loader","ErrorTypography","Forecasts","dispatch","useDispatch","loadingLocation","useSelector","FavoriteLocationSelectLoading","errorLocation","FavoriteLocationSelectError","favoriteLocation","flow","useOneTemperatureType","FavoriteLocationSelectActiveEntity","activeLocation","FavoriteLocationSelectActive","useHomeQuery","response","loadingState","fetchFavoriteLocation","useMemo","filter","location","test","LocalizedName","map","key","Key","localizedName","CardContent","favoriteLocationsActive","gutterBottom","temperature","Button","disabled","onClick","favoriteLocationsToggleFavorite","weatherText","forecasts","forecast","title"],"sourceRoot":""}