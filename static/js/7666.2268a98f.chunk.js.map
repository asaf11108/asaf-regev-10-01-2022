{"version":3,"file":"static/js/7666.2268a98f.chunk.js","mappings":"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","sources":["components/favorite/favorite.tsx","pages/home/home-form.hook.ts","pages/home/home-query.hook.ts","components/autocomplete/autocomplete.tsx","components/autocomplete/autocomplete-input.hook.ts","pages/home/home.style.ts","pages/home/home.tsx"],"sourcesContent":["import { VFC } from 'react';\nimport { FavoriteProps } from './favorite.model';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\n\n\nconst Favorite: VFC<FavoriteProps> = ({ isFavorite }) => {\n\n    return (\n        <>\n            {isFavorite\n                ? <FavoriteIcon fontSize=\"inherit\" color=\"error\" />\n                : <FavoriteBorderIcon fontSize=\"inherit\" />}\n        </>\n    );\n}\n\nexport default Favorite;\n","import { UseControllerProps } from \"react-hook-form\";\n\nexport const HOME_FORM_REG_EXP = /^[a-zA-Z ]+$/;\n\nexport const CONTROLLER_LOCATION_INPUT_RULES: UseControllerProps['rules'] = {\n    required: {\n        value: true,\n        message: `Please enter location`,\n    },\n    pattern: {\n        value: HOME_FORM_REG_EXP,\n        message: \"Only letters are allowed\",\n    },\n}\n\n// INFO: this relavent for autocomplete with form and submit\n// export const CONTROLLER_NAME_LOCATION = 'location';\n\n// export interface HomeForm {\n//     [CONTROLLER_NAME_LOCATION]: Location['key'];\n// }\n\n// export const useHomeForm = (defaultLocation: Location): FormProps<HomeForm, Location, Location['key']> => {\n//     const { handleSubmit, register, getFieldState, setValue } = useForm<HomeForm>({ mode: 'onChange', defaultValues: { [CONTROLLER_NAME_LOCATION]: defaultLocation.key } });\n    \n//     const { ref: controlRef, ...registerProps } = register(CONTROLLER_NAME_LOCATION);\n\n//     return { \n//         handleSubmit,\n//         controls: {\n//             [CONTROLLER_NAME_LOCATION]: {\n//                 ...registerProps,\n//                 controlRef,\n//                 error: getFieldState(CONTROLLER_NAME_LOCATION).error,\n//                 setValue: (val, options) => setValue(CONTROLLER_NAME_LOCATION, val, options),\n//                 defaultOption: defaultLocation\n//             }\n//         }\n//     };\n// }\n","import { useState } from \"react\";\nimport usePromise from \"react-use-promise\";\nimport API from \"../../api/api\";\nimport { AutocompleteOption } from \"../../api/interfaces/autocomplete\";\n\nconst useHomeQuery = () => {\n    const [query, setQuery] = useState<string>();\n    const promiseQuery = usePromise<AutocompleteOption[]>(\n      () => query ? API.getLocations(query) : Promise.resolve([]),\n      [query]\n    );\n\n    return { setQuery, promiseQuery };\n}\n\nexport default useHomeQuery;\n","import { FC, SyntheticEvent, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Autocomplete as MuiAutocomplete, TextField } from \"@mui/material\";\nimport { AutocompleteProps } from \"./autocomplete.model\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport { CircularProgress } from \"@mui/material\";\nimport { useDebounce } from \"use-debounce\";\nimport { usePrevious } from \"react-use\";\nimport { get } from \"lodash-es\";\nimport { useAutocompleteInput } from \"./autocomplete-input.hook\";\n\nconst Autocomplete = <T extends {}, Val>({\n  options = [],\n  loading = false,\n  placeholder = \"option\",\n  defaultOption,\n  idProp = \"id\",\n  nameProp = \"name\",\n  inputRules,\n  error,\n  onSelect,\n  onInputDebounce,\n  onInputFocus,\n  onInput,\n  controlRef,\n  onChange,\n  onBlur,\n  setValue,\n  ...otherProps\n}: AutocompleteProps<T, Val>): ReturnType<FC> => {\n  // throw error\n\n  const [open, setOpen] = useState(false);\n  const [option, setOption] = useState(defaultOption);\n\n  const inputController = useAutocompleteInput(get(defaultOption, nameProp, \"\"), inputRules);\n\n  const [inputDebounce] = useDebounce(inputController.field.value, 1000);\n  const previousInputDebounce = usePrevious(inputDebounce);\n\n  useEffect(() => {\n    previousInputDebounce !== inputDebounce &&\n      open &&\n      !inputController.fieldState.error &&\n      !error &&\n      onInputDebounce?.(inputDebounce);\n  }, [open, inputController.fieldState.error, error, inputDebounce, previousInputDebounce, onInputDebounce]);\n\n  const _onInput: AutocompleteProps<T>[\"onInput\"] = query => {\n    inputController.field.onChange(query);\n    onInput?.(query);\n  };\n\n  const _onSelect = (event: SyntheticEvent, option: T) => {\n    _onInput(get(option, nameProp, \"\"));\n    if (option) {\n      setOption(option);\n      onChange?.(event);\n      setValue?.(get(option, idProp, option));\n      onSelect(option);\n    }\n  };\n\n  const _onBlur: AutocompleteProps<T>[\"onBlur\"] = async event => {\n    inputController.field.onBlur();\n    setOpen(false);\n    onBlur?.(event);\n  };\n\n  return (\n    <MuiAutocomplete\n      {...otherProps}\n      ref={controlRef}\n      defaultValue={defaultOption}\n      value={option}\n      open={open && !inputController.fieldState.error}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      options={options}\n      onChange={(event, option) => _onSelect(event, option!)}\n      onInputChange={(_, query) => _onInput(query)}\n      onBlur={_onBlur}\n      getOptionLabel={(option) => get(option, nameProp, option)}\n      isOptionEqualToValue={(option, value) =>\n        get(option, idProp, option) === get(value, idProp, value)\n      }\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          data-testid=\"autocomplete-textfield\"\n          variant=\"standard\"\n          fullWidth\n          placeholder={placeholder}\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: <SearchIcon />,\n            endAdornment: loading && <CircularProgress size=\"1em\" />,\n          }}\n          error={!!inputController.fieldState.error || !!error}\n          helperText={inputController.fieldState.error?.message || error?.message}\n          onFocus={() => option && onInputFocus?.(option)}\n        />\n      )}\n    />\n  );\n};\n\nexport default Autocomplete;\n","import { useForm, useController, UseControllerProps } from \"react-hook-form\";\n\nexport const useAutocompleteInput = (defaultValue: string, rules: UseControllerProps['rules']) => {\n    const { control } = useForm<{ name: string }>({ mode: 'onChange' });\n    return useController({\n      name: \"name\",\n      control,\n      defaultValue,\n      rules,\n    });\n}\n","import styled from \"@emotion/styled\";\nimport { Card, css, Typography } from \"@mui/material\";\nimport { spread } from \"../../styles/vendors/spread\";\n\nconst SharedBody = css`\n    display: flex;\n    flex-direction: column;\n    ${spread('minHeight', '400px', '500px')}\n`;\n\nconst SharedBodyStates = css`\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const Home = styled.div`\n    text-align: center;\n`;\n\nexport const AutocompleteCard = styled(Card)`\n    ${spread('width', '90%', '50%')}\n    margin: 0 auto;\n    ${spread('marginBottom', '20px', '30px')}\n`;\n\nexport const TitleTypography = styled(Typography)`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap-reverse;\n    & > span {\n        display: flex;\n        flex-direction: column;\n        gap: 5px;\n        align-items: center;\n    }\n\n    .MuiButton-root {\n        font-size: 40px;\n    }\n`;\n\nexport const BodyHeader = styled.div`\n    ${spread('margin', '20px 0', '60px 0')}\n    ${spread('fontSize', '50px', '80px')}\n    text-align: center;\n`;\n\nexport const Body = styled.div`\n    ${SharedBody}\n    justify-content: center;\n`;\n\nexport const Loader = styled.div`\n    ${SharedBody}\n    ${SharedBodyStates}\n`;\n\nexport const ErrorTypography = styled(Typography)`\n    ${SharedBody}\n    ${SharedBodyStates}\n    font-weight: 600;\n`;\n\nexport const Forecasts = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n`;\n","import { VFC, useEffect, useMemo } from \"react\";\nimport { Button, Card, CardContent } from \"@mui/material\";\nimport Forecast from \"../../components/forecast/forecast\";\nimport {\n  FavoriteLocation,\n  Location,\n} from \"../../store/favorite-locations/favorite-locations.model\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchFavoriteLocation } from \"../../store/favorite-locations/favorite-locations.thunk\";\nimport {\n  favoriteLocationsActive,\n  favoriteLocationsToggleFavorite,\n} from \"../../store/favorite-locations/favorite-locations.action\";\nimport {\n  FavoriteLocationSelectActive,\n  FavoriteLocationSelectActiveEntity,\n  FavoriteLocationSelectError,\n  FavoriteLocationSelectLoading,\n} from \"../../store/favorite-locations/favorite-locations.selector\";\nimport Favorite from \"../../components/favorite/favorite\";\nimport { useOneTemperatureType } from \"../../hooks/temprature-type.hook\";\nimport { flow } from \"lodash-es\";\nimport Loader from \"../../components/loader/loader\";\nimport { CONTROLLER_LOCATION_INPUT_RULES, HOME_FORM_REG_EXP } from \"./home-form.hook\";\nimport useHomeQuery from \"./home-query.hook\";\nimport Autocomplete from \"../../components/autocomplete/autocomplete\";\nimport { AutocompleteProps } from \"../../components/autocomplete/autocomplete.model\";\nimport * as S from \"./home.style\";\n\nconst Home: VFC = () => {\n  const dispatch = useDispatch();\n  const loadingLocation = useSelector(FavoriteLocationSelectLoading);\n  const errorLocation = useSelector(FavoriteLocationSelectError);\n  const favoriteLocation: FavoriteLocation = flow([\n    useSelector,\n    useOneTemperatureType,\n  ])(FavoriteLocationSelectActiveEntity);\n\n  const activeLocation = useSelector(FavoriteLocationSelectActive);\n\n  const {\n    setQuery,\n    promiseQuery: [response, , loadingState],\n  } = useHomeQuery();\n\n  useEffect(() => {\n    dispatch(fetchFavoriteLocation(activeLocation));\n  }, [dispatch, activeLocation]);\n\n  const onLocationSelect: AutocompleteProps<Location>[\"onSelect\"] = (\n    location\n  ) => {\n    dispatch(favoriteLocationsActive(location));\n  };\n\n  const onFavoriteClick = (): void => {\n    dispatch(favoriteLocationsToggleFavorite());\n  };\n\n  const options = useMemo<Location[]>(() => {\n    return (response || [])\n      .filter((location) => HOME_FORM_REG_EXP.test(location.LocalizedName))\n      .map<Location>((location) => ({\n        key: location.Key,\n        localizedName: location.LocalizedName,\n      }));\n  }, [response]);\n\n  return (\n    <S.Home>\n      <S.AutocompleteCard>\n        <CardContent>\n          <Autocomplete<Location, Location['key']>\n            idProp=\"key\"\n            nameProp=\"localizedName\"\n            placeholder=\"Search location\"\n            inputRules={CONTROLLER_LOCATION_INPUT_RULES}\n            loading={loadingState === \"pending\"}\n            defaultOption={activeLocation}\n            options={options}\n            onSelect={onLocationSelect}\n            onInputDebounce={setQuery}\n            onInputFocus={option => setQuery(option.localizedName)}\n          />\n        </CardContent>\n      </S.AutocompleteCard>\n\n      <Card>\n        {loadingLocation ? (\n          <S.Loader>\n            <Loader />\n          </S.Loader>\n        ) : errorLocation || !favoriteLocation ? (\n          <S.ErrorTypography variant=\"h1\">NO DATA</S.ErrorTypography>\n        ) : (\n          <CardContent>\n            <S.TitleTypography gutterBottom variant=\"h5\">\n              <span>\n                <span data-testid=\"localized-name\">\n                  {favoriteLocation.localizedName}\n                </span>\n                <span>{favoriteLocation.temperature}</span>\n              </span>\n              <Button disabled={loadingLocation} onClick={onFavoriteClick}>\n                <Favorite isFavorite={favoriteLocation.isFavorite} />\n              </Button>\n            </S.TitleTypography>\n            <S.Body>\n              <S.BodyHeader>{favoriteLocation.weatherText}</S.BodyHeader>\n              <S.Forecasts>\n                {favoriteLocation.forecasts.map((forecast) => (\n                  <Forecast key={forecast.title} forecast={forecast} />\n                ))}\n              </S.Forecasts>\n            </S.Body>\n          </CardContent>\n        )}\n      </Card>\n    </S.Home>\n  );\n};\n\nexport default Home;\n"],"names":["isFavorite","fontSize","color","HOME_FORM_REG_EXP","CONTROLLER_LOCATION_INPUT_RULES","required","value","message","pattern","useState","query","setQuery","promiseQuery","usePromise","API","Promise","resolve","options","loading","placeholder","defaultOption","idProp","nameProp","inputRules","error","onSelect","onInputDebounce","onInputFocus","onInput","controlRef","onChange","onBlur","setValue","otherProps","open","setOpen","option","setOption","inputController","defaultValue","rules","control","useForm","mode","useController","name","useAutocompleteInput","get","useDebounce","field","inputDebounce","previousInputDebounce","usePrevious","useEffect","fieldState","_onInput","_onSelect","event","_onBlur","ref","onOpen","onClose","onInputChange","_","getOptionLabel","isOptionEqualToValue","renderInput","params","TextField","variant","fullWidth","InputProps","startAdornment","Search","endAdornment","CircularProgress","size","helperText","onFocus","SharedBody","css","spread","SharedBodyStates","Home","AutocompleteCard","Card","TitleTypography","Typography","BodyHeader","Body","Loader","ErrorTypography","Forecasts","dispatch","useDispatch","loadingLocation","useSelector","FavoriteLocationSelectLoading","errorLocation","FavoriteLocationSelectError","favoriteLocation","flow","useOneTemperatureType","FavoriteLocationSelectActiveEntity","activeLocation","FavoriteLocationSelectActive","useHomeQuery","response","loadingState","fetchFavoriteLocation","useMemo","filter","location","test","LocalizedName","map","key","Key","localizedName","CardContent","favoriteLocationsActive","gutterBottom","temperature","Button","disabled","onClick","favoriteLocationsToggleFavorite","weatherText","forecasts","forecast","title"],"sourceRoot":""}